axis.text.y = element_text(size=12, family="Open Sans", lineheight = 1.1, color="#888888", margin = margin(t = 0, r = 0, b = 0, l = 0)),
panel.grid = element_line(size=0.1)
)
caption = arrangeGrob(
textGrob('Дані: Біла книги Міноборони України, підрахунок Микола Бєлєсков',
gp = gpar(fontsize = 10, col="white", fontfamily ='Open Sans'),
x = 0.1, y = 0.5, just = c('left', 'bottom')),
rasterGrob(mylogo, x = .95, y = 0.4,
just = c('right', 'bottom'),
width = unit(1.5, 'inches')),
ncol=2
)
# 2020_compare
plot = grid.arrange(
p1,
caption,
ncol=1, nrow=2,
heights=c(0.98, 0.05))
cowplot::ggdraw(plot) +
theme(plot.background = element_rect(fill="#323d4d", color = NA))
caption = arrangeGrob(
textGrob('Дані: Біла книги Міноборони України, підрахунок Микола Бєлєсков',
gp = gpar(fontsize = 11, col="white", fontfamily ='Open Sans'),
x = 0.1, y = 0.5, just = c('left', 'bottom')),
rasterGrob(mylogo, x = .95, y = 0.4,
just = c('right', 'bottom'),
width = unit(1.5, 'inches')),
ncol=2
)
# 2020_compare
plot = grid.arrange(
p1,
caption,
ncol=1, nrow=2,
heights=c(0.98, 0.05))
cowplot::ggdraw(plot) +
theme(plot.background = element_rect(fill="#323d4d", color = NA))
mylogo <- image_scale(image_read("/home/yevheniia/white_logo.png"), "380")
# create a dataset
weapon <- c(
rep("Засоби зв’язку",3),
rep("Протитанкові ракетні комплекси",3),
rep("Безпілотні авіаційні комплекси",3),
rep("РЕБ",3),
rep("Радіолокаційні стації",3),
rep("Літаки та гелікоптери",3)
)
year = rep(c("2018", "2019", "2020"), 6 )
value <- c(840,635,394,200,162,76,75,64,46,38,23,18,31,18,15,30,22,15)
data <- data.frame(weapon,year,value)
# Grouped
p1 = ggplot(data, aes(fill=year, y=value, x=reorder(weapon, -value), label=value)) +
geom_bar(position=position_dodge(0.75), stat="identity", width=0.75)+
geom_text(position = position_dodge(0.75), angle = 0, vjust=-1, hjust=0.5, color="white") +
labs(title="Поставки деяких видів зброї до української Армії", x="", y="", fill="")+
scale_x_discrete(labels = function(x) str_wrap(x, width = 10))+
scale_fill_manual(values = c("#387b94", "#dbe78b", "#d73445"))+
theme_minimal()+
theme(plot.background = element_rect(fill='#323d4d', color="transparent"),
legend.position = "top",
legend.justification = "left",
legend.text = element_text(size=12, color="white"),
plot.title = element_text(size=22, family="Open Sans", color="white", margin = margin(t = 10, r = 0, b = 10, l = 0)),
axis.text.x = element_text(size=12, family="Open Sans", lineheight = 1.1, color="white", margin = margin(t = 0, r = 0, b = 0, l = 0)),
axis.text.y = element_text(size=12, family="Open Sans", lineheight = 1.1, color="#888888", margin = margin(t = 0, r = 0, b = 0, l = 0)),
panel.grid = element_line(size=0.1)
)
caption = arrangeGrob(
textGrob('Дані: Біла книги Міноборони України, підрахунок Микола Бєлєсков',
gp = gpar(fontsize = 11, col="white", fontfamily ='Open Sans'),
x = 0.1, y = 0.5, just = c('left', 'bottom')),
rasterGrob(mylogo, x = .95, y = 0.4,
just = c('right', 'bottom'),
width = unit(1.5, 'inches')),
ncol=2
)
# 2020_compare
plot = grid.arrange(
p1,
caption,
ncol=1, nrow=2,
heights=c(0.98, 0.05))
cowplot::ggdraw(plot) +
theme(plot.background = element_rect(fill="#323d4d", color = NA))
library(dplyr)
library(tidyr)
library(stringr)
library(ggplot2)
library(stringr)
library(gridExtra)
library(grid)
library(magick)
library(scales)
# dir with this script as default
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
# скріпт з функцією розподілу категорій на основі споживчого набору
source("function_detect_product.R")
# скріпт, що приєднує пропущенні значення категорії
source("function_restore_sections_value.R")
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
# year_19 = read.csv("/home/yevheniia/python/food_prices_arviched_data/ashan/ashan-09-11-2019.csv", sep=";", stringsAsFactors = FALSE)
#year_20 = read.csv("/home/yevheniia/python/food_prices_arviched_data/ashan/ashan-18-05-2020.csv", sep=";", stringsAsFactors = FALSE)
year_22 = read.csv("food_prices_fixed_jan_22_full_month.csv", header=FALSE, stringsAsFactors = FALSE)
year_21 = read.csv("food_prices_11_01_2022.csv", header=FALSE, stringsAsFactors = FALSE) %>%
bind_rows(read.csv("food_prices_august_2021.csv")) %>%
bind_rows(year_22) %>%
filter(V1 == "Ашан")  %>%
mutate(V12 = as.Date(V12, format="%d-%m-%Y")) %>%
unique() %>%
select(1:12)
data = restore_sections_value(year_21)
infliation = data %>%
mutate(month = format(as.Date(time), "%Y-%m")) %>%
select(id, product, price, section, time, weight_value, weight_unit, price_kg, month, subsection) %>%
group_by(month, subsection) %>%
mutate(median = median(price_kg)) %>%
mutate(min = min(price_kg)) %>%
mutate(Q1 = quantile(price_kg, prob = .25, na.rm = TRUE)) %>%
ungroup() %>%
group_by(subsection) %>%
mutate(mode = getmode(weight_value)) %>%
ungroup() %>%
mutate(mode = ifelse(mode > 1, mode/1000, mode)) %>%
select(section, subsection, month, median, min, Q1, mode) %>%
distinct(subsection, month, .keep_all = TRUE) %>%
gather(key = "measure", value = "value", min, median, Q1 ) %>%
mutate(month = as.Date(paste0(month, "-01"), format = "%Y-%m-%d")) %>%
select(subsection, month, value, measure, mode) %>%
filter(month != as.Date("2020-02-01")) %>%
group_by(subsection, measure) %>%
arrange(month) %>%
mutate(inflation = paste0(formatC((value - lag(value))*100/lag(value), digits = 2))) %>%
ungroup() %>%
mutate(inflation = as.numeric(inflation)) %>%
mutate(category = car::recode(subsection,"
c('хліб цільнозерновий', 'хліб пшеничний','хліб житньо-пшеничний','батон','багет')='хліб';
c('апельсини', 'банани', 'яблука', 'авокадо', 'мандарини', 'виноград', 'лимони','ягоди', 'ківі', 'кавуни')='фрукти';
c('буряк', 'кабачки', 'капуста білокачанна', 'картопля', 'морква', 'огірки', 'помідори', 'цибуля ріпчаста', 'часник', 'гриби', 'перець солодкий','баклажани','салати')='овочі';
c('свинина', 'свинина гуляш', 'свинина фарш', 'свинина ребра', 'яловичина', 'яловичина фарш', 'яловичина ребра','філе куряче', 'курка крильця', 'курка стегно','птиця (тушки курячі)','субпродукти яловичні','субпродукти свинячі',' субпродукти курячі','сало','вирізка свиняча', 'вирізка яловича') = 'м’ясо';
c('сосиски, сардельки вищого ґатунку', 'сосиски, сардельки першого ґатунку', 'ковбаси варені вищого ґатунку','ковбаси варені першого ґатунку', 'ковбаси сирокопчені в/ґ','ковбаси варено-копчені в/ґ', 'вироби з м’яса делікатесні') = 'ковбасні вироби';
c('пластівці вівсяні', 'рис', 'крупи гречані', 'борошно пшеничне', 'макарони', 'цукор', 'сухі сніданки', 'квасоля','пшоно','крупи манні','крупи ячні','супи')= 'бакалея';
c('молоко пастеризоване жирністю до 2,6% включно', 'йогурт', 'кефір 2.5%', 'сметана жирністю до 15% включно', 'сметана з підвищеним вмістом жиру',  'крем-сир', 'сири тверді типу Едам', 'сири м’які жирні', 'масло вершкове 82%', 'масло вершкове 73%', 'маргарин', 'молоко з підвищеним вмістом жиру', 'сири м’які нежирні', 'сири плавлені', 'сири розсольні','сирки та сиркова маса','молочні суміші для дитячого харчування','яйця')='молочна продукція та яйця';
c( 'риба червона', 'риба річна', 'ікра червона', 'оселедці','скумбрія копчена', 'філе мороженої риби', 'риба морожена', 'консерви рибні в олії','морепродукти')='риба та морепродукти';
c('олія соняшникова', 'олія оливкова')='олія';
c('сік яблучний', 'сік апельсиновий', 'солодка вода' )='безалкогольні напої';
c('кава розчинна', 'кава мелена', 'чай у пакетиках')='кава і чай';
c('пельмені', 'вареники з картоплею',  'крабові палички' )='напівфабрикати';
c('кукурудза консервована', 'горошок консервований','гриби консервовані')='консервовані овочі і гриби';
c('броколі заморожена', 'шпінат заморожений')='овочі заморожені';
c('печиво здобне', 'печиво затяжне','шоколад', 'цукати', 'вафлі','мед','зефір','морозиво','карамель','цукерки шоколадні', 'торти')='солодощі';
c('сухофрукти')='сухофрукти';
c('пиво', 'вино біле сухе', 'вино червоне сухе', 'горілка', 'ром', 'віскі', 'шампанське', 'коньяк')='алкоголь';
c('паста томатна', 'кетчуп томатний', 'майонез', 'сіль')='соуси та спеції';
c('сигарети з фільтром медіум класу', 'сигарети з фільтром преміум класу')='сигарети'
")) %>%
rename(name = subsection)
write.csv(infliation, "/home/yevheniia/git/food_prices/data/cpi_q1_median_january_2022.csv")
# ======================================================
months = c("Липень", "Серпень", "Вересень", "Жовтень", "Листопад")
replacement = c("2021-07-01", "2021-08-01", "2021-09-01", "2021-10-01", "2021-11-01")
library(readr)
setwd("/home/yevheniia/git/food_prices/data/")
df = read.csv("cpi_q1_median_january_2022.csv", stringsAsFactors = F) %>%
filter(measure == "Q1") %>%
rename(item = name) %>%
rename(price = value) %>%
select(-inflation) %>%
group_by(item) %>%
arrange(desc(month)) %>%
mutate(inflation_dynamic = paste0(formatC((price - lag(price))*100/lag(price), digits = 2))) %>%
ungroup() %>%
mutate(inflation_dynamic = as.numeric(inflation_dynamic)+100) %>%
mutate(inflation_dynamic = ifelse(is.na(inflation_dynamic), 100, inflation_dynamic)) %>%
group_by(item) %>%
arrange(month) %>%
mutate(inflation = paste0(formatC((price - lag(price))*100/lag(price), digits = 2))) %>%
ungroup() %>%
mutate(inflation = as.numeric(inflation)+100) %>%
mutate(inflation = ifelse(is.na(inflation), 100, inflation))
setwd("/home/yevheniia/git/food_prices/data/govstat_xlsx/")
govstat_prices = read.csv("govstat_ціни.csv", skip=2) %>% select(-1) %>%
gather(2:6, key="month", value="price") %>%
separate(X.1, c("product", "weight"), sep="\\(", remove=F) %>%
select(-product) %>%
mutate(price = gsub(',', ".", price),
price = as.numeric(price)) %>%
rename(`item` = `X.1`) %>%
filter(item != "") %>%
mutate(item = tolower(item),
item = gsub(" \\(\\d.*", "", item),
item = trimws(item),
month = str_replace_all(month, setNames(replacement, months))
) %>%
# деякі продуктти держстат рахує у вазі від 100гр до 0.75 л.,
# через це перераховуємо вагу на кг, щоб можна було їх порівнювати
mutate(weight = gsub("\\)", "", weight ),
weight = gsub('[А-Яа-я]', "", weight),
weight = gsub(',', ".", weight),
weight = as.numeric(weight),
weight = ifelse(weight < 1, weight*1000, weight),
weight = ifelse(is.na(weight), 1000, weight),
price = price * (1000/weight)
)  %>%
select(-weight)
# на основі даних по інфляції доповнюємо ціни за 2017-2020 рр.
govstat_prices_supplement = read.csv("ІСЦ 2017-2021.csv", stringsAsFactors = F) %>%
select(item, contains("10.01")) %>%
mutate(item = tolower(item),
item = trimws(item)) %>%
left_join(govstat_prices %>%
filter(month == "2021-10-01") %>%
select(-month) %>%
rename(`2021-10-01` = price), by='item') %>%
mutate_at(c(2:6), parse_number, locale = locale(decimal_mark = ",")) %>%
mutate(`2020-10-01` = (`2021-10-01`/X2021.10.01) * 100,
`2019-10-01` = (`2020-10-01`/X2020.10.01) * 100,
`2018-10-01` = (`2019-10-01`/X2019.10.01) * 100,
`2017-10-01` = (`2018-10-01`/X2018.10.01) * 100,
) %>%
select(1,7:11) %>%
gather(2:6, key="month", value="price") %>%
rbind(govstat_prices) %>%
unique() %>%
mutate(measure = "govstat") %>%
group_by(item) %>%
arrange(desc(month)) %>%
mutate(inflation_dynamic = paste0(formatC((price - lag(price))*100/lag(price), digits = 2))) %>%
ungroup() %>%
mutate(inflation_dynamic = as.numeric(inflation_dynamic)+100) %>%
filter(!is.na(price)) %>%
mutate(inflation_dynamic = ifelse(is.na(inflation_dynamic), 100, inflation_dynamic))
df = df %>% bind_rows(govstat_prices_supplement) %>%
rename(name = item) %>%
select(-X)
products = c("молоко пастеризоване жирністю до 2,6% включно",
"молоко з підвищеним вмістом жиру",
"сметана жирністю до 15% включно",
"сметана з підвищеним вмістом жиру",
"ковбаси варені вищого ґатунку",
"ковбаси варені першого ґатунку",
"сосиски, сардельки вищого ґатунку",
"сосиски, сардельки першого ґатунку",
"вироби з м’яса делікатесні",
"яйця",
"сигарети з фільтром преміум класу",
"сигарети з фільтром медіум класу"
)
replacement_products = c("молоко 2.5%",
"молоко 3.2%",
"сметана 10-15%",
"сметана 20%+",
"ковбаси варені в/ґ",
"ковбаси варені 1/ґ",
"сосиски, сардельки в/ґ",
"сосиски, сардельки 1/ґ",
"м’ясні делікатеси",
"яйця, шт.",
"сигарети преміум класу, пачка",
"сигарети медіум класу, пачка"
)
#TODO: переробити яця та сигарети так, щоб не перераховувати вагу на штуки
df = df %>%
mutate(short_name = str_replace_all(name, setNames(replacement_products, products))) %>%
# виключаємо ці продукти тимчасово, у скрипт, що буде додавати продукти повернути ці товари
filter(short_name != "авокадо" & short_name != "ягоди" & short_name != "кавуни" & short_name != "виноград") %>%
left_join(read.csv("/home/yevheniia/git/food_prices/data/category_picture_pair.csv"), by="category") %>%
mutate(step = 0.1,
step = ifelse(short_name =="яйця, шт.", 10,
ifelse(short_name =="сигарети преміум класу, пачка" | short_name =="сигарети медіум класу, пачка", 1, step)),
mode = ifelse(short_name =="яйця, шт.", 10, mode),
price = ifelse(short_name =="яйця, шт.", price/10, price),
)
setwd("/home/yevheniia/git/food_prices/data/")
write.csv(df, "cpi_q1_median_january_2022_and_govstat_history.csv", row.names = F)
str(df)
setwd("/home/yevheniia/git/food_prices/data/govstat_xlsx/")
govstat_prices = read.csv("govstat_ціни.csv", skip=2) %>% select(-1) %>%
gather(2:6, key="month", value="price") %>%
separate(X.1, c("product", "weight"), sep="\\(", remove=F) %>%
select(-product) %>%
mutate(price = gsub(',', ".", price),
price = as.numeric(price)) %>%
rename(`item` = `X.1`) %>%
filter(item != "") %>%
mutate(item = tolower(item),
item = gsub(" \\(\\d.*", "", item),
item = trimws(item),
month = str_replace_all(month, setNames(replacement, months))
) %>%
# деякі продуктти держстат рахує у вазі від 100гр до 0.75 л.,
# через це перераховуємо вагу на кг, щоб можна було їх порівнювати
mutate(weight = gsub("\\)", "", weight ),
weight = gsub('[А-Яа-я]', "", weight),
weight = gsub(',', ".", weight),
weight = as.numeric(weight),
weight = ifelse(weight < 1, weight*1000, weight),
weight = ifelse(is.na(weight), 1000, weight),
price = price * (1000/weight)
)  %>%
select(-weight)
# на основі даних по інфляції доповнюємо ціни за 2017-2020 рр.
govstat_prices_supplement = read.csv("ІСЦ 2017-2021.csv", stringsAsFactors = F) %>%
select(item, contains("10.01")) %>%
mutate(item = tolower(item),
item = trimws(item)) %>%
left_join(govstat_prices %>%
filter(month == "2021-10-01") %>%
select(-month) %>%
rename(`2021-10-01` = price), by='item') %>%
mutate_at(c(2:6), parse_number, locale = locale(decimal_mark = ",")) %>%
mutate(`2020-10-01` = (`2021-10-01`/X2021.10.01) * 100,
`2019-10-01` = (`2020-10-01`/X2020.10.01) * 100,
`2018-10-01` = (`2019-10-01`/X2019.10.01) * 100,
`2017-10-01` = (`2018-10-01`/X2018.10.01) * 100,
) %>%
select(1,7:11) %>%
gather(2:6, key="month", value="price") %>%
rbind(govstat_prices) %>%
unique() %>%
mutate(measure = "govstat") %>%
group_by(item) %>%
arrange(desc(month)) %>%
mutate(inflation_dynamic = paste0(formatC((price - lag(price))*100/lag(price), digits = 2))) %>%
ungroup() %>%
mutate(inflation_dynamic = as.numeric(inflation_dynamic)+100) %>%
filter(!is.na(price)) %>%
mutate(inflation_dynamic = ifelse(is.na(inflation_dynamic), 100, inflation_dynamic))
df = df %>% bind_rows(govstat_prices_supplement) %>%
rename(name = item) %>%
select(-X)
products = c("молоко пастеризоване жирністю до 2,6% включно",
"молоко з підвищеним вмістом жиру",
"сметана жирністю до 15% включно",
"сметана з підвищеним вмістом жиру",
"ковбаси варені вищого ґатунку",
"ковбаси варені першого ґатунку",
"сосиски, сардельки вищого ґатунку",
"сосиски, сардельки першого ґатунку",
"вироби з м’яса делікатесні",
"яйця",
"сигарети з фільтром преміум класу",
"сигарети з фільтром медіум класу"
)
# ======================================================
months = c("Липень", "Серпень", "Вересень", "Жовтень", "Листопад")
replacement = c("2021-07-01", "2021-08-01", "2021-09-01", "2021-10-01", "2021-11-01")
library(readr)
setwd("/home/yevheniia/git/food_prices/data/")
df = read.csv("cpi_q1_median_january_2022.csv", stringsAsFactors = F) %>%
filter(measure == "Q1") %>%
rename(item = name) %>%
rename(price = value) %>%
select(-inflation) %>%
group_by(item) %>%
arrange(desc(month)) %>%
mutate(inflation_dynamic = paste0(formatC((price - lag(price))*100/lag(price), digits = 2))) %>%
ungroup() %>%
mutate(inflation_dynamic = as.numeric(inflation_dynamic)+100) %>%
mutate(inflation_dynamic = ifelse(is.na(inflation_dynamic), 100, inflation_dynamic)) %>%
group_by(item) %>%
arrange(month) %>%
mutate(inflation = paste0(formatC((price - lag(price))*100/lag(price), digits = 2))) %>%
ungroup() %>%
mutate(inflation = as.numeric(inflation)+100) %>%
mutate(inflation = ifelse(is.na(inflation), 100, inflation))
setwd("/home/yevheniia/git/food_prices/data/govstat_xlsx/")
govstat_prices = read.csv("govstat_ціни.csv", skip=2) %>% select(-1) %>%
gather(2:6, key="month", value="price") %>%
separate(X.1, c("product", "weight"), sep="\\(", remove=F) %>%
select(-product) %>%
mutate(price = gsub(',', ".", price),
price = as.numeric(price)) %>%
rename(`item` = `X.1`) %>%
filter(item != "") %>%
mutate(item = tolower(item),
item = gsub(" \\(\\d.*", "", item),
item = trimws(item),
month = str_replace_all(month, setNames(replacement, months))
) %>%
# деякі продуктти держстат рахує у вазі від 100гр до 0.75 л.,
# через це перераховуємо вагу на кг, щоб можна було їх порівнювати
mutate(weight = gsub("\\)", "", weight ),
weight = gsub('[А-Яа-я]', "", weight),
weight = gsub(',', ".", weight),
weight = as.numeric(weight),
weight = ifelse(weight < 1, weight*1000, weight),
weight = ifelse(is.na(weight), 1000, weight),
price = price * (1000/weight)
)  %>%
select(-weight)
# на основі даних по інфляції доповнюємо ціни за 2017-2020 рр.
govstat_prices_supplement = read.csv("ІСЦ 2017-2021.csv", stringsAsFactors = F) %>%
select(item, contains("10.01")) %>%
mutate(item = tolower(item),
item = trimws(item)) %>%
left_join(govstat_prices %>%
filter(month == "2021-10-01") %>%
select(-month) %>%
rename(`2021-10-01` = price), by='item') %>%
mutate_at(c(2:6), parse_number, locale = locale(decimal_mark = ",")) %>%
mutate(`2020-10-01` = (`2021-10-01`/X2021.10.01) * 100,
`2019-10-01` = (`2020-10-01`/X2020.10.01) * 100,
`2018-10-01` = (`2019-10-01`/X2019.10.01) * 100,
`2017-10-01` = (`2018-10-01`/X2018.10.01) * 100,
) %>%
select(1,7:11) %>%
gather(2:6, key="month", value="price") %>%
rbind(govstat_prices) %>%
unique() %>%
mutate(measure = "govstat") %>%
group_by(item) %>%
arrange(desc(month)) %>%
mutate(inflation_dynamic = paste0(formatC((price - lag(price))*100/lag(price), digits = 2))) %>%
ungroup() %>%
mutate(inflation_dynamic = as.numeric(inflation_dynamic)+100) %>%
filter(!is.na(price)) %>%
mutate(inflation_dynamic = ifelse(is.na(inflation_dynamic), 100, inflation_dynamic))
df = df %>% bind_rows(govstat_prices_supplement) %>%
rename(name = item) %>%
select(-X)
products = c("молоко пастеризоване жирністю до 2,6% включно",
"молоко з підвищеним вмістом жиру",
"сметана жирністю до 15% включно",
"сметана з підвищеним вмістом жиру",
"ковбаси варені вищого ґатунку",
"ковбаси варені першого ґатунку",
"сосиски, сардельки вищого ґатунку",
"сосиски, сардельки першого ґатунку",
"вироби з м’яса делікатесні",
"яйця",
"сигарети з фільтром преміум класу",
"сигарети з фільтром медіум класу"
)
replacement_products = c("молоко 2.5%",
"молоко 3.2%",
"сметана 10-15%",
"сметана 20%+",
"ковбаси варені в/ґ",
"ковбаси варені 1/ґ",
"сосиски, сардельки в/ґ",
"сосиски, сардельки 1/ґ",
"м’ясні делікатеси",
"яйця, шт.",
"сигарети преміум класу, пачка",
"сигарети медіум класу, пачка"
)
#TODO: переробити яця та сигарети так, щоб не перераховувати вагу на штуки
df2 = df %>%
mutate(short_name = str_replace_all(name, setNames(replacement_products, products))) %>%
# виключаємо ці продукти тимчасово, у скрипт, що буде додавати продукти повернути ці товари
filter(short_name != "авокадо" & short_name != "ягоди" & short_name != "кавуни" & short_name != "виноград") %>%
left_join(read.csv("/home/yevheniia/git/food_prices/data/category_picture_pair.csv"), by="category") %>%
mutate(step = 0.1,
step = ifelse(short_name =="яйця, шт.", 10,
ifelse(short_name =="сигарети преміум класу, пачка" | short_name =="сигарети медіум класу, пачка", 1, step)),
mode = ifelse(short_name =="яйця, шт.", 10, mode),
price = ifelse(short_name =="яйця, шт.", price/10, price),
) %>%
filter(as.Date(month) < as.Date("2022-02-01"))
View(df)
as.Date(df$month[1])
as.Date("2022-02-01")
as.Date(month) < as.Date("2022-02-01")
as.Date(df$month[1]) < as.Date("2022-02-01")
View(df2)
#TODO: переробити яця та сигарети так, щоб не перераховувати вагу на штуки
df2 = df %>%
mutate(short_name = str_replace_all(name, setNames(replacement_products, products))) %>%
# виключаємо ці продукти тимчасово, у скрипт, що буде додавати продукти повернути ці товари
filter(short_name != "авокадо" & short_name != "ягоди" & short_name != "кавуни" & short_name != "виноград") %>%
left_join(read.csv("/home/yevheniia/git/food_prices/data/category_picture_pair.csv"), by="category") %>%
mutate(step = 0.1,
step = ifelse(short_name =="яйця, шт.", 10,
ifelse(short_name =="сигарети преміум класу, пачка" | short_name =="сигарети медіум класу, пачка", 1, step)),
mode = ifelse(short_name =="яйця, шт.", 10, mode),
price = ifelse(short_name =="яйця, шт.", price/10, price),
) %>%
filter(as.Date(month) < as.Date("2022-02-01"))
setwd("/home/yevheniia/git/food_prices/data/")
write.csv(df2, "cpi_q1_median_january_2022_and_govstat_history.csv", row.names = F)
#TODO: переробити яця та сигарети так, щоб не перераховувати вагу на штуки
df2 = df %>%
mutate(short_name = str_replace_all(name, setNames(replacement_products, products))) %>%
# виключаємо ці продукти тимчасово, у скрипт, що буде додавати продукти повернути ці товари
filter(short_name != "авокадо" & short_name != "ягоди" & short_name != "кавуни" & short_name != "виноград") %>%
left_join(read.csv("/home/yevheniia/git/food_prices/data/category_picture_pair.csv"), by="category") %>%
mutate(step = 0.1,
step = ifelse(short_name =="яйця, шт.", 10,
ifelse(short_name =="сигарети преміум класу, пачка" | short_name =="сигарети медіум класу, пачка", 1, step)),
mode = ifelse(short_name =="яйця, шт.", 10, mode),
price = ifelse(short_name =="яйця, шт.", price/10, price),
)
setwd("/home/yevheniia/git/food_prices/data/")
write.csv(df2, "cpi_q1_median_january_2022_and_govstat_history.csv", row.names = F)
#TODO: переробити яця та сигарети так, щоб не перераховувати вагу на штуки
df2 = df %>%
mutate(short_name = str_replace_all(name, setNames(replacement_products, products))) %>%
# виключаємо ці продукти тимчасово, у скрипт, що буде додавати продукти повернути ці товари
filter(short_name != "авокадо" & short_name != "ягоди" & short_name != "кавуни" & short_name != "виноград") %>%
left_join(read.csv("/home/yevheniia/git/food_prices/data/category_picture_pair.csv"), by="category") %>%
mutate(step = 0.1,
step = ifelse(short_name =="яйця, шт.", 10,
ifelse(short_name =="сигарети преміум класу, пачка" | short_name =="сигарети медіум класу, пачка", 1, step)),
mode = ifelse(short_name =="яйця, шт.", 10, mode),
price = ifelse(short_name =="яйця, шт.", price/10, price),
) %>%
filter(as.Date(month) < as.Date("2022-02-01"))
setwd("/home/yevheniia/git/food_prices/data/")
write.csv(df2, "cpi_q1_median_january_2022_and_govstat_history.csv", row.names = F)
