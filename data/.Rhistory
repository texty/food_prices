rename(`item` = `X.1`) %>%
filter(item != "") %>%
mutate(item = tolower(item),
item = gsub(" \\(\\d.*", "", item),
item = trimws(item),
month = str_replace_all(month, setNames(replacement, months))
) %>%
mutate(weight = gsub("\\)", "", weight ),
weight = gsub('[А-Яа-я]', "", weight),
weight = gsub(',', ".", weight),
weight = as.numeric(weight),
weight = ifelse(weight < 1, weight*1000, weight),
weight = ifelse(is.na(weight), 1, weight),
price = price * (1/weight)
) %>%
select(-weight)
# на основі даних по інфляції доповнюємо ціни за 2017-2020 рр.
govstat_prices_supplement = read.csv("ІСЦ 2017-2021.csv", stringsAsFactors = F) %>%
select(item, contains("10.01")) %>%
mutate(item = tolower(item),
item = trimws(item)) %>%
left_join(govstat_prices %>%
filter(month == "2021-10-01") %>%
select(-month) %>%
rename(`2021-10-01` = price), by='item') %>%
mutate_at(c(2:6), parse_number, locale = locale(decimal_mark = ",")) %>%
mutate(`2020-10-01` = (`2021-10-01`/X2021.10.01) * 100,
`2019-10-01` = (`2020-10-01`/X2020.10.01) * 100,
`2018-10-01` = (`2019-10-01`/X2019.10.01) * 100,
`2017-10-01` = (`2018-10-01`/X2018.10.01) * 100,
) %>%
select(1,7:11) %>%
gather(2:6, key="month", value="price") %>%
rbind(govstat_prices) %>%
unique() %>%
mutate(measure = "govstat") %>%
group_by(item) %>%
arrange(desc(month)) %>%
mutate(inflation_dynamic = paste0(formatC((price - lag(price))*100/lag(price), digits = 2))) %>%
ungroup() %>%
mutate(inflation_dynamic = as.numeric(inflation_dynamic)+100) %>%
filter(!is.na(price)) %>%
mutate(inflation_dynamic = ifelse(is.na(inflation_dynamic), 100, inflation_dynamic))
df = df %>% bind_rows(govstat_prices_supplement) %>%
rename(name = item) %>%
select(-X)
products = c("молоко пастеризоване жирністю до 2,6% включно",
"молоко з підвищеним вмістом жиру",
"сметана жирністю до 15% включно",
"сметана з підвищеним вмістом жиру",
"ковбаси варені вищого ґатунку",
"ковбаси варені першого ґатунку",
"сосиски, сардельки вищого ґатунку",
"сосиски, сардельки першого ґатунку",
"вироби з м’яса делікатесні"
)
replacement_products = c("молоко 2.5%",
"молоко 3.2%",
"сметана 10-15%",
"сметана 20%+",
"ковбаси варені в/ґ",
"ковбаси варені 1/ґ",
"сосиски, сардельки в/ґ",
"сосиски, сардельки 1/ґ",
"м’ясні делікатеси"
)
df = df %>%
mutate(short_name = str_replace_all(name, setNames(replacement_products, products)))
setwd("/home/yevheniia/git/food_prices/data/")
write.csv(df, "cpi_q1_median_january_2022_and_govstat_history.csv", row.names = F)
setwd("/home/yevheniia/git/food_prices/data/govstat_xlsx/")
govstat_prices = read.csv("govstat_ціни.csv", skip=2) %>% select(-1) %>%
gather(2:6, key="month", value="price") %>%
separate(X.1, c("product", "weight"), sep="\\(", remove=F) %>%
select(-product) %>%
mutate(price = gsub(',', ".", price),
price = as.numeric(price)) %>%
rename(`item` = `X.1`) %>%
filter(item != "") %>%
mutate(item = tolower(item),
item = gsub(" \\(\\d.*", "", item),
item = trimws(item),
month = str_replace_all(month, setNames(replacement, months))
) %>%
mutate(weight = gsub("\\)", "", weight ),
weight = gsub('[А-Яа-я]', "", weight),
weight = gsub(',', ".", weight),
weight = as.numeric(weight),
# weight = ifelse(weight < 1, weight*1000, weight),
# weight = ifelse(is.na(weight), 1, weight),
# price = price * (1/weight)
)
setwd("/home/yevheniia/git/food_prices/data/govstat_xlsx/")
govstat_prices = read.csv("govstat_ціни.csv", skip=2) %>% select(-1) %>%
gather(2:6, key="month", value="price") %>%
separate(X.1, c("product", "weight"), sep="\\(", remove=F) %>%
select(-product) %>%
mutate(price = gsub(',', ".", price),
price = as.numeric(price)) %>%
rename(`item` = `X.1`) %>%
filter(item != "") %>%
mutate(item = tolower(item),
item = gsub(" \\(\\d.*", "", item),
item = trimws(item),
month = str_replace_all(month, setNames(replacement, months))
) %>%
mutate(weight = gsub("\\)", "", weight ),
weight = gsub('[А-Яа-я]', "", weight),
weight = gsub(',', ".", weight),
weight = as.numeric(weight),
weight = ifelse(weight < 1, weight*1000, weight),
# weight = ifelse(is.na(weight), 1, weight),
# price = price * (1/weight)
)
govstat_prices = read.csv("govstat_ціни.csv", skip=2) %>% select(-1) %>%
gather(2:6, key="month", value="price") %>%
separate(X.1, c("product", "weight"), sep="\\(", remove=F) %>%
select(-product) %>%
mutate(price = gsub(',', ".", price),
price = as.numeric(price)) %>%
rename(`item` = `X.1`) %>%
filter(item != "") %>%
mutate(item = tolower(item),
item = gsub(" \\(\\d.*", "", item),
item = trimws(item),
month = str_replace_all(month, setNames(replacement, months))
) %>%
mutate(weight = gsub("\\)", "", weight ),
weight = gsub('[А-Яа-я]', "", weight),
weight = gsub(',', ".", weight),
weight = as.numeric(weight),
weight = ifelse(weight < 1, weight*1000, weight),
weight = ifelse(is.na(weight), 1, weight),
# price = price * (1/weight)
)
setwd("/home/yevheniia/git/food_prices/data/govstat_xlsx/")
govstat_prices = read.csv("govstat_ціни.csv", skip=2) %>% select(-1) %>%
gather(2:6, key="month", value="price") %>%
separate(X.1, c("product", "weight"), sep="\\(", remove=F) %>%
select(-product) %>%
mutate(price = gsub(',', ".", price),
price = as.numeric(price)) %>%
rename(`item` = `X.1`) %>%
filter(item != "") %>%
mutate(item = tolower(item),
item = gsub(" \\(\\d.*", "", item),
item = trimws(item),
month = str_replace_all(month, setNames(replacement, months))
) %>%
mutate(weight = gsub("\\)", "", weight ),
weight = gsub('[А-Яа-я]', "", weight),
weight = gsub(',', ".", weight),
weight = as.numeric(weight),
weight = ifelse(weight < 1, weight, weight),
weight = ifelse(is.na(weight), 1, weight),
price = price * (1/weight)
)
govstat_prices = read.csv("govstat_ціни.csv", skip=2) %>% select(-1) %>%
gather(2:6, key="month", value="price") %>%
separate(X.1, c("product", "weight"), sep="\\(", remove=F) %>%
select(-product) %>%
mutate(price = gsub(',', ".", price),
price = as.numeric(price)) %>%
rename(`item` = `X.1`) %>%
filter(item != "") %>%
mutate(item = tolower(item),
item = gsub(" \\(\\d.*", "", item),
item = trimws(item),
month = str_replace_all(month, setNames(replacement, months))
) %>%
mutate(weight = gsub("\\)", "", weight ),
weight = gsub('[А-Яа-я]', "", weight),
weight = gsub(',', ".", weight),
weight = as.numeric(weight),
weight = ifelse(weight < 1, weight, weight),
weight = ifelse(is.na(weight), 1, weight),
price = price * (1/weight)
)
govstat_prices = read.csv("govstat_ціни.csv", skip=2) %>% select(-1) %>%
gather(2:6, key="month", value="price") %>%
separate(X.1, c("product", "weight"), sep="\\(", remove=F) %>%
select(-product) %>%
mutate(price = gsub(',', ".", price),
price = as.numeric(price)) %>%
rename(`item` = `X.1`) %>%
filter(item != "") %>%
mutate(item = tolower(item),
item = gsub(" \\(\\d.*", "", item),
item = trimws(item),
month = str_replace_all(month, setNames(replacement, months))
) %>%
mutate(weight = gsub("\\)", "", weight ),
weight = gsub('[А-Яа-я]', "", weight),
weight = gsub(',', ".", weight),
weight = as.numeric(weight),
weight = ifelse(weight < 1, weight, weight),
weight = ifelse(is.na(weight), 1, weight/1000),
price = price * (1/weight)
)
govstat_prices = read.csv("govstat_ціни.csv", skip=2) %>% select(-1) %>%
gather(2:6, key="month", value="price") %>%
separate(X.1, c("product", "weight"), sep="\\(", remove=F) %>%
select(-product) %>%
mutate(price = gsub(',', ".", price),
price = as.numeric(price)) %>%
rename(`item` = `X.1`) %>%
filter(item != "") %>%
mutate(item = tolower(item),
item = gsub(" \\(\\d.*", "", item),
item = trimws(item),
month = str_replace_all(month, setNames(replacement, months))
) %>%
mutate(weight = gsub("\\)", "", weight ),
weight = gsub('[А-Яа-я]', "", weight),
weight = gsub(',', ".", weight),
weight = as.numeric(weight),
weight = ifelse(weight < 1, weight, weight),
weight = ifelse(is.na(weight), 1, weight),
price = price * (1/weight)
)
setwd("/home/yevheniia/git/food_prices/data/govstat_xlsx/")
govstat_prices = read.csv("govstat_ціни.csv", skip=2) %>% select(-1) %>%
gather(2:6, key="month", value="price") %>%
separate(X.1, c("product", "weight"), sep="\\(", remove=F) %>%
select(-product) %>%
mutate(price = gsub(',', ".", price),
price = as.numeric(price)) %>%
rename(`item` = `X.1`) %>%
filter(item != "") %>%
mutate(item = tolower(item),
item = gsub(" \\(\\d.*", "", item),
item = trimws(item),
month = str_replace_all(month, setNames(replacement, months))
) %>%
mutate(weight = gsub("\\)", "", weight ),
weight = gsub('[А-Яа-я]', "", weight),
weight = gsub(',', ".", weight),
weight = as.numeric(weight),
weight = ifelse(weight < 1, weight*1000, weight),
weight = ifelse(is.na(weight), 1, weight),
price = price * (1/weight)
)
setwd("/home/yevheniia/git/food_prices/data/govstat_xlsx/")
govstat_prices = read.csv("govstat_ціни.csv", skip=2) %>% select(-1) %>%
gather(2:6, key="month", value="price") %>%
separate(X.1, c("product", "weight"), sep="\\(", remove=F) %>%
select(-product) %>%
mutate(price = gsub(',', ".", price),
price = as.numeric(price)) %>%
rename(`item` = `X.1`) %>%
filter(item != "") %>%
mutate(item = tolower(item),
item = gsub(" \\(\\d.*", "", item),
item = trimws(item),
month = str_replace_all(month, setNames(replacement, months))
) %>%
mutate(weight = gsub("\\)", "", weight ),
weight = gsub('[А-Яа-я]', "", weight),
weight = gsub(',', ".", weight),
weight = as.numeric(weight),
weight = ifelse(weight < 1, weight*1000, weight),
weight = ifelse(is.na(weight), 1000, weight),
price = price * (1000/weight)
)
govstat_prices = read.csv("govstat_ціни.csv", skip=2) %>% select(-1) %>%
gather(2:6, key="month", value="price") %>%
separate(X.1, c("product", "weight"), sep="\\(", remove=F) %>%
select(-product) %>%
mutate(price = gsub(',', ".", price),
price = as.numeric(price)) %>%
rename(`item` = `X.1`) %>%
filter(item != "") %>%
mutate(item = tolower(item),
item = gsub(" \\(\\d.*", "", item),
item = trimws(item),
month = str_replace_all(month, setNames(replacement, months))
) %>%
mutate(weight = gsub("\\)", "", weight ),
weight = gsub('[А-Яа-я]', "", weight),
weight = gsub(',', ".", weight),
weight = as.numeric(weight),
weight = ifelse(weight < 1, weight*1000, weight),
weight = ifelse(is.na(weight), 1000, weight),
price = price * (1000/weight)
)  %>%
select(-weight)
# на основі даних по інфляції доповнюємо ціни за 2017-2020 рр.
govstat_prices_supplement = read.csv("ІСЦ 2017-2021.csv", stringsAsFactors = F) %>%
select(item, contains("10.01")) %>%
mutate(item = tolower(item),
item = trimws(item)) %>%
left_join(govstat_prices %>%
filter(month == "2021-10-01") %>%
select(-month) %>%
rename(`2021-10-01` = price), by='item') %>%
mutate_at(c(2:6), parse_number, locale = locale(decimal_mark = ",")) %>%
mutate(`2020-10-01` = (`2021-10-01`/X2021.10.01) * 100,
`2019-10-01` = (`2020-10-01`/X2020.10.01) * 100,
`2018-10-01` = (`2019-10-01`/X2019.10.01) * 100,
`2017-10-01` = (`2018-10-01`/X2018.10.01) * 100,
) %>%
select(1,7:11) %>%
gather(2:6, key="month", value="price") %>%
rbind(govstat_prices) %>%
unique() %>%
mutate(measure = "govstat") %>%
group_by(item) %>%
arrange(desc(month)) %>%
mutate(inflation_dynamic = paste0(formatC((price - lag(price))*100/lag(price), digits = 2))) %>%
ungroup() %>%
mutate(inflation_dynamic = as.numeric(inflation_dynamic)+100) %>%
filter(!is.na(price)) %>%
mutate(inflation_dynamic = ifelse(is.na(inflation_dynamic), 100, inflation_dynamic))
df = df %>% bind_rows(govstat_prices_supplement) %>%
rename(name = item) %>%
select(-X)
products = c("молоко пастеризоване жирністю до 2,6% включно",
"молоко з підвищеним вмістом жиру",
"сметана жирністю до 15% включно",
"сметана з підвищеним вмістом жиру",
"ковбаси варені вищого ґатунку",
"ковбаси варені першого ґатунку",
"сосиски, сардельки вищого ґатунку",
"сосиски, сардельки першого ґатунку",
"вироби з м’яса делікатесні"
)
replacement_products = c("молоко 2.5%",
"молоко 3.2%",
"сметана 10-15%",
"сметана 20%+",
"ковбаси варені в/ґ",
"ковбаси варені 1/ґ",
"сосиски, сардельки в/ґ",
"сосиски, сардельки 1/ґ",
"м’ясні делікатеси"
)
df = df %>%
mutate(short_name = str_replace_all(name, setNames(replacement_products, products)))
setwd("/home/yevheniia/git/food_prices/data/")
write.csv(df, "cpi_q1_median_january_2022_and_govstat_history.csv", row.names = F)
setwd("/home/yevheniia/git/food_prices/data/govstat_xlsx/")
govstat_prices = read.csv("govstat_ціни.csv", skip=2) %>% select(-1) %>%
gather(2:6, key="month", value="price") %>%
separate(X.1, c("product", "weight"), sep="\\(", remove=F) %>%
select(-product) %>%
mutate(price = gsub(',', ".", price),
price = as.numeric(price)) %>%
rename(`item` = `X.1`) %>%
filter(item != "") %>%
mutate(item = tolower(item),
item = gsub(" \\(\\d.*", "", item),
item = trimws(item),
month = str_replace_all(month, setNames(replacement, months))
) %>%
mutate(weight = gsub("\\)", "", weight ),
weight = gsub('[А-Яа-я]', "", weight),
weight = gsub(',', ".", weight),
weight = as.numeric(weight),
weight = ifelse(weight < 1, weight*1000, weight),
weight = ifelse(is.na(weight), 1000, weight),
price = price * (1000/weight)
)  %>%
select(-weight)
# на основі даних по інфляції доповнюємо ціни за 2017-2020 рр.
govstat_prices_supplement = read.csv("ІСЦ 2017-2021.csv", stringsAsFactors = F) %>%
select(item, contains("10.01")) %>%
mutate(item = tolower(item),
item = trimws(item)) %>%
left_join(govstat_prices %>%
filter(month == "2021-10-01") %>%
select(-month) %>%
rename(`2021-10-01` = price), by='item') %>%
mutate_at(c(2:6), parse_number, locale = locale(decimal_mark = ",")) %>%
mutate(`2020-10-01` = (`2021-10-01`/X2021.10.01) * 100,
`2019-10-01` = (`2020-10-01`/X2020.10.01) * 100,
`2018-10-01` = (`2019-10-01`/X2019.10.01) * 100,
`2017-10-01` = (`2018-10-01`/X2018.10.01) * 100,
) %>%
select(1,7:11) %>%
gather(2:6, key="month", value="price") %>%
rbind(govstat_prices) %>%
unique() %>%
mutate(measure = "govstat") %>%
group_by(item) %>%
arrange(desc(month)) %>%
mutate(inflation_dynamic = paste0(formatC((price - lag(price))*100/lag(price), digits = 2))) %>%
ungroup() %>%
mutate(inflation_dynamic = as.numeric(inflation_dynamic)+100) %>%
filter(!is.na(price)) %>%
mutate(inflation_dynamic = ifelse(is.na(inflation_dynamic), 100, inflation_dynamic))
df = df %>% bind_rows(govstat_prices_supplement) %>%
rename(name = item) %>%
select(-X)
library(readr)
setwd("/home/yevheniia/git/food_prices/data/")
df = read.csv("cpi_q1_median_january_2022.csv", stringsAsFactors = F) %>%
filter(measure == "Q1") %>%
rename(item = name) %>%
rename(price = value) %>%
select(-inflation) %>%
group_by(item) %>%
arrange(desc(month)) %>%
mutate(inflation_dynamic = paste0(formatC((price - lag(price))*100/lag(price), digits = 2))) %>%
ungroup() %>%
mutate(inflation_dynamic = as.numeric(inflation_dynamic)+100) %>%
mutate(inflation_dynamic = ifelse(is.na(inflation_dynamic), 100, inflation_dynamic)) %>%
group_by(item) %>%
arrange(month) %>%
mutate(inflation = paste0(formatC((price - lag(price))*100/lag(price), digits = 2))) %>%
ungroup() %>%
mutate(inflation = as.numeric(inflation)+100) %>%
mutate(inflation = ifelse(is.na(inflation), 100, inflation))
setwd("/home/yevheniia/git/food_prices/data/govstat_xlsx/")
govstat_prices = read.csv("govstat_ціни.csv", skip=2) %>% select(-1) %>%
gather(2:6, key="month", value="price") %>%
separate(X.1, c("product", "weight"), sep="\\(", remove=F) %>%
select(-product) %>%
mutate(price = gsub(',', ".", price),
price = as.numeric(price)) %>%
rename(`item` = `X.1`) %>%
filter(item != "") %>%
mutate(item = tolower(item),
item = gsub(" \\(\\d.*", "", item),
item = trimws(item),
month = str_replace_all(month, setNames(replacement, months))
) %>%
mutate(weight = gsub("\\)", "", weight ),
weight = gsub('[А-Яа-я]', "", weight),
weight = gsub(',', ".", weight),
weight = as.numeric(weight),
weight = ifelse(weight < 1, weight*1000, weight),
weight = ifelse(is.na(weight), 1000, weight),
price = price * (1000/weight)
)  %>%
select(-weight)
setwd("/home/yevheniia/git/food_prices/data/govstat_xlsx/")
govstat_prices = read.csv("govstat_ціни.csv", skip=2) %>% select(-1) %>%
gather(2:6, key="month", value="price") %>%
separate(X.1, c("product", "weight"), sep="\\(", remove=F) %>%
select(-product) %>%
mutate(price = gsub(',', ".", price),
price = as.numeric(price)) %>%
rename(`item` = `X.1`) %>%
filter(item != "") %>%
mutate(item = tolower(item),
item = gsub(" \\(\\d.*", "", item),
item = trimws(item),
month = str_replace_all(month, setNames(replacement, months))
) %>%
mutate(weight = gsub("\\)", "", weight ),
weight = gsub('[А-Яа-я]', "", weight),
weight = gsub(',', ".", weight),
weight = as.numeric(weight),
weight = ifelse(weight < 1, weight*1000, weight),
weight = ifelse(is.na(weight), 1000, weight),
price = price * (1000/weight)
)  %>%
select(-weight)
# на основі даних по інфляції доповнюємо ціни за 2017-2020 рр.
govstat_prices_supplement = read.csv("ІСЦ 2017-2021.csv", stringsAsFactors = F) %>%
select(item, contains("10.01")) %>%
mutate(item = tolower(item),
item = trimws(item)) %>%
left_join(govstat_prices %>%
filter(month == "2021-10-01") %>%
select(-month) %>%
rename(`2021-10-01` = price), by='item') %>%
mutate_at(c(2:6), parse_number, locale = locale(decimal_mark = ",")) %>%
mutate(`2020-10-01` = (`2021-10-01`/X2021.10.01) * 100,
`2019-10-01` = (`2020-10-01`/X2020.10.01) * 100,
`2018-10-01` = (`2019-10-01`/X2019.10.01) * 100,
`2017-10-01` = (`2018-10-01`/X2018.10.01) * 100,
) %>%
select(1,7:11) %>%
gather(2:6, key="month", value="price") %>%
rbind(govstat_prices) %>%
unique() %>%
mutate(measure = "govstat") %>%
group_by(item) %>%
arrange(desc(month)) %>%
mutate(inflation_dynamic = paste0(formatC((price - lag(price))*100/lag(price), digits = 2))) %>%
ungroup() %>%
mutate(inflation_dynamic = as.numeric(inflation_dynamic)+100) %>%
filter(!is.na(price)) %>%
mutate(inflation_dynamic = ifelse(is.na(inflation_dynamic), 100, inflation_dynamic))
df = df %>% bind_rows(govstat_prices_supplement) %>%
rename(name = item) %>%
select(-X)
products = c("молоко пастеризоване жирністю до 2,6% включно",
"молоко з підвищеним вмістом жиру",
"сметана жирністю до 15% включно",
"сметана з підвищеним вмістом жиру",
"ковбаси варені вищого ґатунку",
"ковбаси варені першого ґатунку",
"сосиски, сардельки вищого ґатунку",
"сосиски, сардельки першого ґатунку",
"вироби з м’яса делікатесні"
)
replacement_products = c("молоко 2.5%",
"молоко 3.2%",
"сметана 10-15%",
"сметана 20%+",
"ковбаси варені в/ґ",
"ковбаси варені 1/ґ",
"сосиски, сардельки в/ґ",
"сосиски, сардельки 1/ґ",
"м’ясні делікатеси"
)
df = df %>%
mutate(short_name = str_replace_all(name, setNames(replacement_products, products)))
setwd("/home/yevheniia/git/food_prices/data/")
write.csv(df, "cpi_q1_median_january_2022_and_govstat_history.csv", row.names = F)
